{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","artistData","currentSearchQuery","getSearchInput","bind","assertThisInitialized","setSearchOutput","event","uriString","encodeURI","target","value","_this2","preventDefault","fetch","concat","then","response","console","log","json","data","setState","results","lis","length","forEach","artist","push","react_default","a","createElement","href","trackViewUrl","className","key","trackId","trackName","artistName","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAqEeA,qBAhEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,WAAY,GACZC,mBAAoB,IAGtBT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACtBA,EAAKa,gBAAkBb,EAAKa,gBAAgBF,KAArBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATNA,8EAYJc,GACb,IAAMC,EAAYC,UAAUF,EAAMG,OAAOC,OACzCf,KAAKI,MAAME,mBAAqBM,0CAGlBD,GAAO,IAAAK,EAAAhB,KACrBW,EAAMM,iBAENC,MAAK,wCAAAC,OAEDnB,KAAKI,MAAME,mBAFV,cAIHc,KAAK,SAAAC,GACLC,QAAQC,IAAIF,GACZA,EAASG,OAAOJ,KAAK,SAAAK,GACnBT,EAAKU,SAAS,CACZrB,WAAYoB,EAAKE,+CAOvB,IAAIC,EAAM,GAcV,OAZI5B,KAAKI,MAAMC,WAAWwB,QAAU,GAClC7B,KAAKI,MAAMC,WAAWyB,QAAQ,SAAAC,GAC5BH,EAAII,KACFC,EAAAC,EAAAC,cAAA,KAAGC,KAAML,EAAOM,aAAcC,UAAU,OACtCL,EAAAC,EAAAC,cAAA,MAAII,IAAKR,EAAOS,SACbT,EAAOU,UADV,QAC0BV,EAAOW,gBAQvCT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,SAAU5C,KAAKO,iBAClC0B,EAAAC,EAAAC,cAAA,UAAQU,QAAS7C,KAAKU,iBAAtB,YAGJuB,EAAAC,EAAAC,cAAA,UAAKP,WA3DKkB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.f42e8256.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport cors from \"./cors\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      artistData: {},\n      currentSearchQuery: \"\"\n    };\n\n    this.getSearchInput = this.getSearchInput.bind(this);\n    this.setSearchOutput = this.setSearchOutput.bind(this);\n  }\n\n  getSearchInput(event) {\n    const uriString = encodeURI(event.target.value);\n    this.state.currentSearchQuery = uriString;\n  }\n\n  setSearchOutput(event) {\n    event.preventDefault();\n\n    fetch(\n      `https://itunes.apple.com/search?term=${\n        this.state.currentSearchQuery\n      }&limit=50`\n    ).then(response => {\n      console.log(response);\n      response.json().then(data => {\n        this.setState({\n          artistData: data.results\n        });\n      });\n    });\n  }\n\n  render() {\n    let lis = [];\n\n    if (this.state.artistData.length >= 1) {\n      this.state.artistData.forEach(artist => {\n        lis.push(\n          <a href={artist.trackViewUrl} className=\"anc\">\n            <li key={artist.trackId}>\n              {artist.trackName} By: {artist.artistName}\n            </li>\n          </a>\n        );\n      });\n    }\n\n    return (\n      <div className=\"react-wrapper\">\n        <header>\n          <h1>Search iTunes for your favorite artist</h1>\n          <form>\n            <input type=\"text\" onChange={this.getSearchInput} />\n            <button onClick={this.setSearchOutput}>Search</button>\n          </form>\n        </header>\n        <ul>{lis}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}